using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace classGenerator
{
    class ClassManager
    {
        //List of attribut of the class
        private List<Attribut> attributs;

        private List<AttributManager> attributsDb;


        private string name;

        private string nameUpdater;
        /**
         *Constructor of the class; 
         */
        public ClassManager()
        {
            this.attributs = new List<Attribut>();
        }

        /**
         * Get the list of attributs of the class
         * return 
         * List<Attribut> 
         */
        public List<Attribut> getListAttributs()
        {
            return this.attributs;
        }

        /**
         * Get the list of attributs of the class
         * return 
         * List<Attribut> 
         */
        public List<AttributManager> getListAttributsDb()
        {
            return this.attributsDb;
        }

        /**
         * Get the name of the class
         * return
         * string @name 
         */
        public string getName()
        {
            return this.name;
        }


        /**
         * Get the name of the classUpdater
         * return
         * string @nameUpdater 
         */
        public string getNameUpdater()
        {
            return this.nameUpdater;
        }

        /**
         * Set the name of the class
         * param 
         * string @nameSend 
         */
        public void setName(string nameSend)
        {
            this.name = nameSend;
            this.setNameUpdater(nameSend);
        }

        /**
        * Set the name of the classUpdater
        * param 
        * string @nameSend 
        */
        private void setNameUpdater(string nameSend)
        {
            this.nameUpdater = nameSend + "Updater";
        }

        /**
         * Set the header in the class file
         */
        public string[] setHeader()
        {
            DateTime thisDay = DateTime.Today;

            string[] line = new string[10];

            line[0] = "<?php";
            line[1] = "/**";
            line[2] = "  * Generated by ClassGenerator";
            line[3] = "  * Antoine Plagnol";
            line[4] = "  * More info : https://github.com/plagnol";
            line[5] = "  * Date : " + thisDay.ToString();
            line[6] = "  */";
            line[7] = " ";
            line[8] = "class " + this.getName();
            line[9] = "{";


            return line;
        }

        /**
         * Set the header in the classUpdater file
         */
        public string[] setHeaderDb()
        {
            DateTime thisDay = DateTime.Today;

            string[] line = new string[10];

            line[0] = "<?php";
            line[1] = "/**";
            line[2] = "  * Generated by ClassGenerator";
            line[3] = "  * Antoine Plagnol";
            line[4] = "  * More info : https://github.com/plagnol";
            line[5] = "  * Date : " + thisDay.ToString();
            line[6] = "  */";
            line[7] = " ";
            line[8] = "class " + this.getName() + "Updater";
            line[9] = "{";


            return line;
        }
        /**
         * Add attribut to the class
         * param
         * Attribut @att
         * 
         * return void
         */
        public void addAttribut(Attribut att)
        {
            this.attributs.Add(att);
        }


        /**
         * Add attribut to the classUpdater
         * param
         * Attribut @att
         * 
         * return void
         */
        public void addAttributDb(AttributManager att)
        {
            this.attributsDb.Add(att);
        }

        public List<string> getAttribut(Attribut att)
        {
            List<string> line = new List<string>();

            line.Add(" ");
            line.Add( "    private $" + att.getName() + ";" );

            return line;
        }

        public List<string> getAttributManager()
        {
            List<string> line = new List<string>();

            line.Add(" ");
            line.Add("    //Connection PDO");
            line.Add("    private $db ;");
            line.Add(" ");
            line.Add("    /**");
            line.Add("     * UserUpdater constructor.");
            line.Add("     * @param $db : database");
            line.Add("     */");
            line.Add("      public function __construct($db)");
            line.Add("      {");
            line.Add("          $this->setDb($db);");
            line.Add("      }");

            return line;
        }


        public List<string> setGetter(Attribut att)
        {
            List<string> line = new List<string>();
            string name = FirstCharToUpper(att.getName());
            line.Add(" ");
            line.Add("/**");
            line.Add("  *@return " + att.getType());
            line.Add("  */");
            line.Add("  ");
            line.Add("public function get" + name + "()");
            line.Add("{");
            line.Add("    return $this->" + att.getName() +";");
            line.Add("}");

            return line;
        }


        public List<string> setSetter(Attribut att)
        {
            List<string> line = new List<string>();
            string name = FirstCharToUpper(att.getName());
            line.Add(" ");
            line.Add("/**");
            line.Add("  *@param " + att.getType() + " $" + att.getName());
            line.Add("  */");
            line.Add("  ");
            line.Add("public function set" + name + "( $" + att.getName() + " )");
            line.Add("{");
            line.Add("    $this->" + att.getName() + " = $" + att.getName() + ";");
            line.Add("}");

            return line;
        }

        public List<string> setSetterManager()
        {
            List<string> line = new List<string>();

            line.Add(" ");
            line.Add("    /**");
            line.Add("     * set the database");
            line.Add("     * @param PDO $db database");
            line.Add("     */");
            line.Add(" ");
            line.Add("      public function setDb(PDO $bdd)");
            line.Add("      {");
            line.Add("          $this->db = $bdd;");
            line.Add("      }");

            return line;
        }
        /**
         * Put the first carac of a string to upper
         * param
         * string @input
         * 
         * return 
         * string
         */
        private static string FirstCharToUpper(string input)
        {
            switch (input)
            {
                case null: throw new ArgumentNullException(nameof(input));
                case "": throw new ArgumentException($"{nameof(input)} cannot be empty", nameof(input));
                default: return input.First().ToString().ToUpper() + input.Substring(1);
            }
        }
    }
}
